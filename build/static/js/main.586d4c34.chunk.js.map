{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","setShowChat","setRoom","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","a","trim","messageData","userId","id","author","message","time","Date","now","toLocaleTimeString","emit","prev","useEffect","on","data","chatBody","document","getElementById","scrollTop","scrollHeight","className","onClick","map","Math","random","toString","slice","type","placeholder","onChange","value","target","onKeyDown","key","io","connect","App","setUsername","error","setError","showChat","statusList","setStatusList","joinRoom","length","list","status","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.586d4c34.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\n\r\nconst Chat = ({ socket, username, room, setShowChat, setRoom }) => {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\")\r\n  const [messageList, setMessageList] = useState([])\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage.trim() === \"\") return\r\n    const messageData = {\r\n      userId: socket.id,\r\n      room,\r\n      author: username,\r\n      message: currentMessage,\r\n      time: new Date(Date.now()).toLocaleTimeString(),\r\n    }\r\n    await socket.emit(\"send_message\", messageData)\r\n    setMessageList(prev => [...prev, messageData])\r\n    setCurrentMessage('')\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setMessageList(prev => [...prev, data])\r\n    })\r\n  }, [socket])\r\n\r\n  useEffect(() => {\r\n    const chatBody = document.getElementById('chat-body')\r\n    chatBody.scrollTop = chatBody.scrollHeight\r\n  }, [messageList])\r\n\r\n  const leaveHandler = () => {\r\n    setShowChat(false)\r\n    setRoom('')\r\n    socket.emit(\"leave_room\", { username, room })\r\n  }\r\n\r\n  return (\r\n    <div className='chat-window h-100 w-80 pb-2 border bg-gray-200 border-gray-300 rounded shadow-lg'>\r\n      <div className='chat-header flex justify-between bg-gray-800'>\r\n        <p className='text-green-50 p-2 text-xl leading-6 overflow-ellipsis'>Room: {room}</p>\r\n        <button className='text-green-50 p-2 text-xl leading-6 transition-colors duration-300 hover:bg-red-500' onClick={leaveHandler}>Leave</button>\r\n      </div>\r\n      <div id=\"chat-body\" className='chat-body h-80 ml-1 px-1 py-2 flex flex-col overflow-y-scroll'>\r\n        {messageList.map(({ userId, message, author, time }) => (\r\n          <div \r\n            key={Math.random().toString(36).slice(2)}\r\n            className={`message flex flex-col ${userId === socket.id ? 'you' : 'other'}`}\r\n          >\r\n            <div className=\"message-content break-all px-2 py-1\">\r\n              {message}\r\n            </div>\r\n            <div className=\"chat-meta\">\r\n              <span className=\"text-sm\">{author === '' ? '神祕訪客' : author}</span>\r\n              <span className=\"text-xs font-light text-gray-500\"> - {time}</span></div>\r\n          </div>\r\n        ))}\r\n\r\n      </div>\r\n      <div className='chat-footer'>\r\n        <input\r\n          className='w-64 px-1 ml-1.5 border border-gray-300'\r\n          type='text'\r\n          placeholder='安安...'\r\n          onChange={({ target: { value } }) => setCurrentMessage(value)}\r\n          value={currentMessage}\r\n          onKeyDown={({ key }) => key === 'Enter' && sendMessage()}\r\n        ></input>\r\n        <button onClick={sendMessage} className='w-12 border border-gray-300 transition-colors duration-300 hover:bg-blue-500'>\r\n          ▶\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","import React, { useState, useEffect } from \"react\"\r\nimport io from \"socket.io-client\"\r\nimport Chat from \"./Chat\"\r\n\r\n// const socket = io.connect(\"\")\r\nconst socket = io.connect(\"http://chat.ben6515.tw\")\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState(\"\")\r\n  const [room, setRoom] = useState(\"\")\r\n  const [error, setError] = useState(\"\")\r\n  const [showChat, setShowChat] = useState(false)\r\n  const [statusList, setStatusList] = useState([])\r\n\r\n  const joinRoom = () => {\r\n    if (room.trim() === \"\") return setError('請選擇一個房間或輸入房間的名字')\r\n    if (username.length > 16 || room.length >= 16) return setError('名字或房間的長度不能超過 16 個字')\r\n    socket.emit(\"join_room\", { username, room })\r\n    setShowChat(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setError('')\r\n  }, [username, room])\r\n\r\n  useEffect(() => {\r\n    socket.on(\"status\", (data) =>{\r\n      setStatusList(prev => [...prev, data])\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const chatBody = document.getElementById('status-body')\r\n    chatBody.scrollTop = chatBody.scrollHeight\r\n  }, [statusList])\r\n\r\n  return (\r\n    <div className='min-h-screen max-w-full grid justify-center items-center'>\r\n      <div className='font-mono grid grid-clos-2 gap-4 justify-center'>\r\n        {!showChat ? (\r\n          <>\r\n            <h2 className='text-lg text-center'>Live Chat</h2>\r\n            <input\r\n              className='shadow-md border border-gray-300 px-2 rounded w-64 h-10'\r\n              type='text'\r\n              placeholder='Name...'\r\n              onChange={({ target: { value } }) => setUsername(value)}\r\n              value={username}\r\n            />\r\n            <input\r\n              className='shadow-md border border-gray-300 px-2 rounded w-64 h-10'\r\n              type='text'\r\n              placeholder='Room ID...'\r\n              onChange={({ target: { value } }) => setRoom(value)}\r\n              value={room}\r\n              list='room-list'\r\n              onKeyDown={({ key }) => key === 'Enter' && joinRoom()}\r\n            />\r\n            <datalist id='room-list'>\r\n              <option value='sweet home'></option>\r\n              <option value='gossip'></option>\r\n              <option value='away from table'></option>\r\n            </datalist>\r\n            <button\r\n              className='shadow-md border border-gray-300 px-2 rounded w-64 h-10 bg-green-400'\r\n              onClick={joinRoom}\r\n            >\r\n              join a room\r\n            </button>\r\n            {error && <div className=\"text-red-500\">{error}</div>}\r\n          </>\r\n        ) : (\r\n          <Chat\r\n            socket={socket}\r\n            username={username}\r\n            room={room}\r\n            setRoom={setRoom}\r\n            setShowChat={setShowChat}\r\n          />\r\n        )}\r\n        <div id=\"status-body\" className=\"h-20 overflow-y-hidden\">\r\n          {statusList.map((status) => (\r\n              <p \r\n                key={Math.random().toString(26).slice(2)}\r\n                className=\"text-sm text-gray-500\"\r\n              >{status}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport './index.css'\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}